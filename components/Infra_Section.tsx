'use client';

import '@/styles/globals.css'
import { useState, useRef } from 'react';
import MainArticle from '@components/main_article';
import SideArticle from '@components/side_article';
import StayUpdated from '@components/footer_nav/stay_update';
import ExternalLinks from '@components/footer_nav/external_links';

export interface Article {
  title: string;
  date: string;
  shortDescription: string;
  href: string;
  image: string;
}

interface Infra_SectionProps {
  featuredMain: Article;
  featuredSide1: Article;
  featuredSide2: Article;
}

export default function Infra_Section({ featuredMain, featuredSide1, featuredSide2 }: Infra_SectionProps) {
  const [selectedFilter, setSelectedFilter] = useState('All');

  // List of all articles with categories
  const allArticles = [
    {
      type: 'side2',
      filter: 'Data Engines',
      component: (
        <SideArticle
          title="Robotic World Models"
          date=""
          image_url="/article_images/Robotic World Models.png"
          href="/robotic_world_models"
          description="Scale your teleoperation data at the lowest costs"
        />
      ),
    },
    {
      type: 'tooling',
      filter: 'Data Engines',
      component: (
        <SideArticle
          title="Data Weighting"
          date=""
          image_url="/data_weighting.png"
          href="/data_weighting"
          description="Autonomously select the best data generated by the world model"
        />
      ),
    },
    {
      type: 'main',
      filter: 'Data Engines',
      component: (
        <MainArticle
          date={featuredMain.date}
          title={featuredMain.title}
          image_url="/article_images/embodied-reasoning.png"
          href={featuredMain.href}
          description="Improve your robot policies by adding reasoning to your datasets"
        />
      ),
    },
    {
      type: 'side1',
      filter: 'Evaluations',
      component: (
        <SideArticle
          title={featuredSide1.title}
          date={featuredSide1.date}
          image_url="/article_images/vla-arena.png"
          href={featuredSide1.href}
          description="Evaluate VLAs head-to-head in an in-browser physics simulation"
        />
      ),
    },
  ];

  // Filter articles based on selected category
  const filteredArticles =
    selectedFilter === 'All'
      ? allArticles
      : allArticles.filter((article) => article.filter === selectedFilter);

  // Pagination for mobile layout
  const articlesPerPage = 3;
  const totalPages = Math.ceil(filteredArticles.length / articlesPerPage);
  const [carouselPage, setCarouselPage] = useState(0);
  const pagedArticles = filteredArticles.slice(
    carouselPage * articlesPerPage,
    (carouselPage + 1) * articlesPerPage
  );

  return (
    <div className="flex min-h-fit">
      <main className="flex-1">
        <section className="max-w-[65rem] mx-auto px-4 sm:px-6 lg:px-8 py-10">
          <h1 className="text-[calc(2.5rem)] pt-4 leading-[1.2] my-4 w-full text-left">
            INFRASTRUCTURE
          </h1>
          {/* Filter buttons */}
          <div className="mb-8 flex flex-wrap gap-4">
            {['All', 'Data Engines', 'Evaluations'].map((option) => (
              <button
                key={option}
                onClick={() => setSelectedFilter(option)}
                className={`px-5 py-2 rounded-lg border transition-colors duration-200 focus:outline-none font-normal text-base ${
                  selectedFilter === option
                    ? 'border-black bg-white text-black'
                    : 'border-gray-400 bg-white text-black hover:bg-gray-100'
                }`}
                style={{ minWidth: 'fit-content' }}
              >
                {option}
              </button>
            ))}
          </div>
          {/* Mobile view with vertical spacing */}
          <div className="sm:hidden">
            {filteredArticles.length === 0 ? (
              <div className="text-center py-10 text-gray-600">
                We're busy cooking something up!
              </div>
            ) : (
              <> 
                <div className="mx-auto max-w-[95%] flex flex-col space-y-6">
                  {pagedArticles.map((article, idx) => (
                    <div key={idx} className="w-full">
                      {article.component}
                    </div>
                  ))} 
                </div> 
                {/* Pagination dots */}
                {totalPages > 1 && (
                  <div className="flex justify-center mt-4 space-x-2">
                    {Array.from({ length: totalPages }).map((_, idx) => (
                      <button
                        key={idx}
                        onClick={() => setCarouselPage(idx)}
                        className={`px-2 py-1 rounded-full border ${
                          carouselPage === idx
                            ? 'bg-black text-white border-black'
                            : 'bg-white text-black border-gray-400'
                        }`}
                      >
                        {idx + 1}
                      </button>
                    ))}
                  </div>
                )}
              </>
            )}
          </div>
          {/* Desktop grid layout */}
          <div className="hidden sm:grid grid-cols-4 gap-6">
            {filteredArticles.length === 0 ? (
              <div className="col-span-3 text-center py-10 text-gray-600">
                We're busy cooking something up!
              </div>
            ) : (
              filteredArticles.map((article, idx) => (
                <div key={idx}>{article.component}</div>
              ))
            )}
          </div>

          {/* Footer */}
          <div className="relative mt-20">
            <div className="flex flex-col md:flex-row justify-between items-start gap-10 md:gap-20">
              <div className="w-full md:w-1/2">
                <StayUpdated />
              </div>
              <nav className="w-full md:w-1/2 flex flex-col sm:flex-row sm:space-x-[50px] pt-4">
                <ExternalLinks />
              </nav>
            </div>
          </div>
        </section>
      </main>
    </div>
  );
}